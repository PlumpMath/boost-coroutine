[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:overview Overview]

__boost_coroutine__ provides templates for generalized subroutines which allow
multiple entry points for suspending and resuming execution at certain locations.
It preserves local state/data and allows reentering subroutines more than once
(useful if state must be kept across function calls).

Coroutines can be viewed as a language-level construct providing a special kind of control flow.

This interface was designed by Giovanni Piero Deretta; the implementation utilizes
__boost_context__.

In order to use the classes and functions described here, you can either include
the specific headers specified by the descriptions of each class or function, or
include the master library header:

    #include <boost/coroutine/all.hpp>

which includes all the other headers in turn.

All functions and classes are contained in the namespace __coro_ns__.

__boost_coroutine__ depends on __boost_context__ as well as __boost_move__ and requires
__boost_version__.


[endsect]
