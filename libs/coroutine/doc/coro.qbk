[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[article Coroutine
    [quickbook 1.4]
    [authors [Kowalke, Oliver]]
    [copyright 2009 Oliver Kowalke]
    [purpose C++ Library providing coroutine facility]
    [category text]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]


[def __boost_build__ [*Boost.Build]]
[def __boost_context__ [*Boost.Context]]
[def __boost_coroutine__ [*Boost.Coroutine]]
[def __boost_exception__ [*Boost.Exception]]
[def __boost_move__ [*Boost.Move]]
[def __boost_version__ [*Boost-1.50.0]]

[def __coro__ ['coroutine]]
[def __coro_fn__ ['coroutine-function]]
[def __coro_ns__ ['boost::coro]]
[def __coro_op__ ['coroutine<>::operator()()]]
[def __coros__ ['coroutines]]
[def __coro_self__ ['coroutine<>::self_t]]
[def __coro_yield__ ['coroutine<>::self_t::yield()]]
[def __coro_yield_break__ ['coroutine<>::self_t::yield_break()]]
[def __fls_alloc__ ['::FlsAlloc()]]
[def __fls__ ['fiber-local storage]]
[def __fls_free__ ['::FlsFree()]]
[def __forced_unwind__ ['forced_unwind]]
[def __gen_fn__ ['generator-function]]
[def __gen__ ['generator]]
[def __gen_ns__ ['boost::coro]]
[def __gen_op__ ['generator<>::operator()()]]
[def __gen_self__ ['generator<>::self_t]]
[def __gens__ ['generators]]
[def __gen_yield__ ['generator<>::self_t::yield()]]
[def __gen_yield_break__ ['generator<>::self_t::yield_break()]]
[def __gen_eval__ ['generator<>::operator unspecified_bool_type()]]
[def __not_a_coro__ ['not-a-coroutine]]
[def __not_a_gen__ ['not-a-generator]]
[def __signature__ ['Signature]]
[def __stack_allocator_concept__ ['StackAllocator concept]]
[def __stack_allocator__ ['StackAllocator]]
[def __stack_helper__ ['stack_helper]]
[def __stack__ ['stack]]
[def __terminated_ex__ ['coroutine_terminated]]
[def __invalid_ex__ ['invalid_argument]]
[def __threads__ ['threads]]
[def __thread__ ['thread]]
[def __tls__ ['thread-local storage]]
[def __tuple__ ['boost::tuple<>]]

[include overview.qbk]
[include coroutine.qbk]
[include generator.qbk]
[include acknowledgements.qbk]
