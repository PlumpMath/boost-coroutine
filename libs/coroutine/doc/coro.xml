<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<article id="coroutine" last-revision="$Date: 2012/09/10 16:37:44 $" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Coroutine</title>
  <articleinfo>
    <authorgroup>
    <author>
      <firstname>Oliver</firstname> <surname>Kowalke</surname>
    </author>
    </authorgroup>
    <copyright>
      <year>2009</year> <holder>Oliver Kowalke</holder>
    </copyright>
    <legalnotice>
      <para>
        Distributed under the Boost Software License, Version 1.0. (See accompanying
        file LICENSE_1_0.txt or copy at <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice>
    <articlepurpose>
      C++ Library providing coroutine facility
    </articlepurpose>
    <articlecategory name="category:text"></articlecategory>
  </articleinfo>
  <section id="coroutine.overview">
    <title><link linkend="coroutine.overview">Overview</link></title>
    <para>
      <emphasis role="bold">Boost.Coroutine</emphasis> provides templates for generalized
      subroutines which allow multiple entry points for suspending and resuming execution
      at certain locations. It preserves local state/data and allows reentering subroutines
      more than once (useful if state must be kept across function calls).
    </para>
    <para>
      Coroutines can be viewed as a language-level construct providing a special
      kind of control flow.
    </para>
    <para>
      The API/interface of <emphasis role="bold">Boost.Coroutine</emphasis> was designed
      by Giovanni Piero Deretta; the implementation uses <emphasis role="bold">Boost.Context</emphasis>
      for context switches.
    </para>
    <para>
      In order to use the classes and functions described here, you can either include
      the specific headers specified by the descriptions of each class or function,
      or include the master library header:
    </para>
    
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">/</phrase><phrase role="identifier">all</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
</programlisting>
    <para>
      which includes all the other headers in turn.
    </para>
    <para>
      All functions and classes are contained in the namespace <emphasis>boost::coro</emphasis>.
    </para>
    <para>
      <emphasis role="bold">Boost.Coroutine</emphasis> depends on <emphasis role="bold">Boost.Context</emphasis>
      as well as <emphasis role="bold">Boost.Move</emphasis> and requires <emphasis
      role="bold">Boost-1.51.0</emphasis>.
    </para>
    <warning>
      <para>
        This library is not an official Boost library.
      </para>
    </warning>
  </section>
  <section id="coroutine.coroutine">
    <title><link linkend="coroutine.coroutine">Coroutine</link></title>
    <para>
      Each instance of <emphasis>coroutine</emphasis> represents a context (CPU registers
      and stack space) of execution or <emphasis>not-a-coroutine</emphasis>. Objects
      of type <emphasis>coroutine</emphasis> are moveable but not copyable and can
      be returned by a function.
    </para>
    
<programlisting><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">f</phrase><phrase role="special">();</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>
    <phrase role="identifier">c</phrase><phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <warning>
      <para>
        If <emphasis>coroutine</emphasis> is used in a multithreaded application,
        it can migrate between threads, but must not reference <emphasis>thread-local
        storage</emphasis>.
      </para>
    </warning>
    <warning>
      <para>
        If <emphasis>fiber-local storage</emphasis> is used on Windows, the user
        is responsible for calling <emphasis>::FlsAlloc()</emphasis>, <emphasis>::FlsFree()</emphasis>.
      </para>
    </warning>
    <note>
      <para>
        <emphasis role="bold">Boost.Move</emphasis> is used to emulate rvalue references.
      </para>
    </note>
    <anchor id="coroutine.coroutine.executing_a_coroutine"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.coroutine.executing_a_coroutine">Executing a coroutine</link>
    </bridgehead>
    <para>
      A new <emphasis>coroutine</emphasis> is created from a callable object (known
      as the <emphasis>coroutine-function</emphasis>). The stack size, stack unwinding
      and floating-point preserving behavior are determined by additional arguments.
    </para>
    <para>
      The <emphasis>coroutine</emphasis> constructor uses the <emphasis>StackStackAllocator
      concept</emphasis> from <emphasis role="bold">Boost.Context</emphasis> to allocate
      an associated stack, and the destructor uses the same <emphasis>StackStackAllocator
      concept</emphasis> to deallocate the stack. The default <emphasis>StackStackAllocator
      concept</emphasis> is <emphasis>ctx::stack_allocator</emphasis> (see documentation
      of <emphasis role="bold">Boost.Context</emphasis>), but a custom stack-allocator
      can be passed to the constructor.
    </para>
    <para>
      The first argument of <emphasis>coroutine-function</emphasis> must be a reference
      of type <emphasis>coroutine&lt;&gt;::self_t</emphasis>, used for yielding the
      active coroutine.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">)</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="special">...</phrase>
    <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">();</phrase>
    <phrase role="special">...</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">coro_t</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
<phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="number">7</phrase><phrase role="special">);</phrase>
</programlisting>
    <para>
      The <emphasis>coroutine-function</emphasis>, as well as its arguments, if any,
      are copied into the coroutine's state. If a reference is required, use boost::ref.
    </para>
    <note>
      <para>
        The maximum number of arguments of <emphasis>coroutine-function</emphasis>
        is 10.
      </para>
    </note>
    <para>
      The first invocation of <emphasis>coroutine&lt;&gt;::operator()()</emphasis>
      invokes the <emphasis>coroutine-function</emphasis> in a newly created coroutine
      complete with registers, flags, stack and instruction pointer. When control
      should be returned to the original calling routine, call <emphasis>coroutine&lt;&gt;::self_t::yield()</emphasis>
      or <emphasis>coroutine&lt;&gt;::self_t::yield_break()</emphasis>. The current
      coroutine information (registers, flags, and stack and instruction pointer)
      is saved and the original context information is restored. Calling <emphasis>coroutine&lt;&gt;::operator()()</emphasis>
      resumes execution in the coroutine after saving the new state of the original
      routine.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">fn</phrase><phrase role="special">(</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">j</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">for</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">j</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fn(): local variable i == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

        <phrase role="comment">// save current coroutine
</phrase>        <phrase role="comment">// value of local variable is preserved
</phrase>        <phrase role="comment">// transfer execution control back to main()
</phrase>        <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">();</phrase>

        <phrase role="comment">// coroutine&lt;&gt;::operator()() was called
</phrase>        <phrase role="comment">// execution control transfered back from main()    
</phrase>    <phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">argc</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*</phrase> <phrase role="identifier">argv</phrase><phrase role="special">[])</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">coro_t</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="number">7</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main() starts coroutine c&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">while</phrase> <phrase role="special">(</phrase> <phrase role="special">!</phrase> <phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">is_complete</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main() calls coroutine c&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
        <phrase role="comment">// execution control is transfered to c
</phrase>        <phrase role="identifier">c</phrase><phrase role="special">();</phrase>

        <phrase role="comment">// yield() was called within fn()
</phrase>    <phrase role="special">}</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;Done&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_SUCCESS</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">output</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">starts</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">2</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">4</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">5</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">6</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">()</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">Done</phrase>
</programlisting>
    <warning>
      <para>
        Calling <emphasis>coroutine&lt;&gt;::operator()()</emphasis> from inside
        the same coroutine results in undefined behaviour.
      </para>
    </warning>
    <note>
      <para>
        In contrast to threads, which are preemptive, <emphasis>coroutine</emphasis>
        switches are cooperative (programmer controls when a switch will happen).
        The kernel is not involved in the coroutine switches.
      </para>
    </note>
    <anchor id="coroutine.coroutine.transfer_of_data"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.coroutine.transfer_of_data">Transfer of data</link>
    </bridgehead>
    <para>
      The first template argument of <emphasis>coroutine</emphasis>, <emphasis>Signature</emphasis>,
      defines the signature of the <emphasis>coroutine-function</emphasis> and its
      return type.
    </para>
    <note>
      <para>
        <emphasis>coroutine&lt;&gt;::self_t</emphasis> is not part of <emphasis>Signature</emphasis>
        and is always expected to be the first argument of <emphasis>coroutine-function</emphasis>.
      </para>
    </note>
    <para>
      <emphasis>coroutine&lt;&gt;::operator()()</emphasis> accepts arguments as defined
      in <emphasis>Signature</emphasis> and has the same return type. The arguments
      passed to <emphasis>coroutine&lt;&gt;::operator()()</emphasis>, in one coroutine,
      is returned (as a boost::tuple) by <emphasis>coroutine&lt;&gt;::self_t::yield()</emphasis>
      in the other coroutine or, if it is the first call to <emphasis>coroutine&lt;&gt;::operator()()</emphasis>
      (<emphasis>coroutine</emphasis> was not started), the <emphasis>coroutine-function</emphasis>
      will be entered and the arguments are passed to <emphasis>coroutine-function</emphasis>
      on entry.
    </para>
    <para>
      The value given to <emphasis>coroutine&lt;&gt;::self_t::yield()</emphasis>,
      in one coroutine, is returned by <emphasis>coroutine&lt;&gt;::operator()()</emphasis>
      in the other routine.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase><phrase role="special">)</phrase> <phrase role="special">&gt;</phrase>    <phrase role="identifier">coro_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">fn</phrase><phrase role="special">(</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fn(): local variable i == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="comment">// save current coroutine context
</phrase>    <phrase role="comment">// transfer execution control back to caller
</phrase>    <phrase role="comment">// pass content of variable back
</phrase>    <phrase role="keyword">int</phrase> <phrase role="identifier">j</phrase> <phrase role="special">=</phrase> <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>
    <phrase role="comment">// j == 10 because c( 10) in main()
</phrase>    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fn(): local variable j == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">j</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">j</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">argc</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*</phrase> <phrase role="identifier">argv</phrase><phrase role="special">[])</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">coro_t</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="identifier">_2</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): call coroutine c&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="number">7</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): transfered value: &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): transfered value: &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;Done&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_SUCCESS</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">output</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">7</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">transfered</phrase> <phrase role="identifier">value</phrase><phrase role="special">:</phrase> <phrase role="number">7</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">j</phrase> <phrase role="special">==</phrase> <phrase role="number">10</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">transfered</phrase> <phrase role="identifier">value</phrase><phrase role="special">:</phrase> <phrase role="number">10</phrase>
    <phrase role="identifier">Done</phrase>
</programlisting>
    <anchor id="coroutine.coroutine._emphasis_coroutine_function__emphasis__with_multiple_arguments"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.coroutine._emphasis_coroutine_function__emphasis__with_multiple_arguments"><emphasis>coroutine-function</emphasis>
      with multiple arguments</link>
    </bridgehead>
    <para>
      If <emphasis>coroutine-function</emphasis> has more than one argument <emphasis>coroutine&lt;&gt;::operator()()</emphasis>
      has the same size of arguments and <emphasis>coroutine&lt;&gt;::self_t::yield()</emphasis>
      returns a <emphasis>boost::tuple</emphasis> coresponding to the arguments of
      <emphasis>Signature</emphasis>.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">,</phrase><phrase role="keyword">int</phrase><phrase role="special">)</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">fn</phrase><phrase role="special">(</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">a</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">b</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">tmp</phrase> <phrase role="special">=</phrase> <phrase role="identifier">a</phrase> <phrase role="special">+</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">ret</phrase> <phrase role="special">=</phrase> <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">ret</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">&lt;</phrase> <phrase role="number">0</phrase> <phrase role="special">&gt;()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">ret</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">&lt;</phrase> <phrase role="number">1</phrase> <phrase role="special">&gt;();</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">argc</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*</phrase> <phrase role="identifier">argv</phrase><phrase role="special">[])</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">coro_t</phrase> <phrase role="identifier">coro</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="identifier">_2</phrase><phrase role="special">,</phrase> <phrase role="identifier">_3</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): call coroutine c&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">res</phrase> <phrase role="special">=</phrase> <phrase role="identifier">coro</phrase><phrase role="special">(</phrase> <phrase role="number">3</phrase><phrase role="special">,</phrase> <phrase role="number">7</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): 3 + 7 == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">res</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">res</phrase> <phrase role="special">=</phrase> <phrase role="identifier">coro</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">,</phrase> <phrase role="number">7</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): 5 + 7 == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">res</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;Done&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_SUCCESS</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">output</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="number">3</phrase> <phrase role="special">+</phrase> <phrase role="number">7</phrase> <phrase role="special">==</phrase> <phrase role="number">10</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="number">5</phrase> <phrase role="special">+</phrase> <phrase role="number">7</phrase> <phrase role="special">==</phrase> <phrase role="number">12</phrase>
    <phrase role="identifier">Done</phrase>
</programlisting>
    <anchor id="coroutine.coroutine.exit_a__emphasis_coroutine_function__emphasis_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.coroutine.exit_a__emphasis_coroutine_function__emphasis_">Exit
      a <emphasis>coroutine-function</emphasis></link>
    </bridgehead>
    <para>
      <emphasis>coroutine&lt;&gt;::self_t::yield_break()</emphasis> does not take
      arguments and returns nothing, it leaves the current <emphasis>coroutine</emphasis>
      and jumps back to the calling routine throwing an exception of type <emphasis>coroutine_terminated</emphasis>.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">,</phrase><phrase role="keyword">int</phrase><phrase role="special">)</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">fn</phrase><phrase role="special">(</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">a</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">b</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">tmp</phrase> <phrase role="special">=</phrase> <phrase role="identifier">a</phrase> <phrase role="special">+</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">ret</phrase> <phrase role="special">=</phrase> <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield_break</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">return</phrase> <phrase role="special">-</phrase><phrase role="number">1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">argc</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*</phrase> <phrase role="identifier">argv</phrase><phrase role="special">[])</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">try</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">coro_t</phrase> <phrase role="identifier">coro</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="identifier">_2</phrase><phrase role="special">,</phrase> <phrase role="identifier">_3</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): call coroutine c&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">int</phrase> <phrase role="identifier">res</phrase> <phrase role="special">=</phrase> <phrase role="identifier">coro</phrase><phrase role="special">(</phrase> <phrase role="number">3</phrase><phrase role="special">,</phrase> <phrase role="number">7</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): 3 + 7 == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">res</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

        <phrase role="identifier">res</phrase> <phrase role="special">=</phrase> <phrase role="identifier">coro</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">,</phrase> <phrase role="number">7</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): 5 + 7 == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">res</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;Done&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

        <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_SUCCESS</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>
    <phrase role="keyword">catch</phrase> <phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine_terminated</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cerr</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;coroutine terminated&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_FAILURE</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">output</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="identifier">c</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="number">3</phrase> <phrase role="special">+</phrase> <phrase role="number">7</phrase> <phrase role="special">==</phrase> <phrase role="number">10</phrase>
    <phrase role="identifier">coroutine</phrase> <phrase role="identifier">terminated</phrase>
</programlisting>
    <important>
      <para>
        After calling <emphasis>coroutine&lt;&gt;::self_t::yield_break()</emphasis>
        the <emphasis>coroutine</emphasis> is complete (can not resumed with <emphasis>coroutine&lt;&gt;::operator()()</emphasis>).
      </para>
    </important>
    <anchor id="coroutine.coroutine.exceptions_in__emphasis_coroutine_function__emphasis_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.coroutine.exceptions_in__emphasis_coroutine_function__emphasis_">Exceptions
      in <emphasis>coroutine-function</emphasis></link>
    </bridgehead>
    <para>
      An exception thrown inside <emphasis>coroutine-function</emphasis> (transfered
      via exception-pointer - see <emphasis role="bold">Boost.Exception</emphasis>
      for details and requirements) will be re-thrown by <emphasis>coroutine&lt;&gt;::operator()()</emphasis>.
      If the thrown exception does not follow the guidlines from <emphasis role="bold">Boost.Exception</emphasis>
      an exception of type <code><phrase role="identifier">unknown_exception</phrase></code>
      will be re-thrown.
    </para>
    <important>
      <para>
        Code executed by coroutine must not prevent the propagation of the <emphasis>forced_unwind</emphasis>
        exception. Absorbing that exception will cause stack unwinding to fail. Thus,
        any code that catches all exceptions must rethrow the pending exception.
      </para>
    </important>
    
<programlisting><phrase role="keyword">try</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// code that might throw
</phrase><phrase role="special">}</phrase>
<phrase role="keyword">catch</phrase><phrase role="special">(</phrase> <phrase role="identifier">forced_unwind</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">throw</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
<phrase role="keyword">catch</phrase><phrase role="special">(...)</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// possibly not rethrow pending exception
</phrase><phrase role="special">}</phrase>
</programlisting>
    <anchor id="coroutine.coroutine.stack_unwinding"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.coroutine.stack_unwinding">Stack unwinding</link>
    </bridgehead>
    <para>
      Sometimes it is necessary to unwind the stack of an unfinished coroutine to
      destroy local stack variables so they can release allocated resources (RAII
      pattern). The third argument of the coroutine constructor, <code><phrase role="identifier">do_unwind</phrase></code>,
      indicates whether the destructor should unwind the stack (stack is unwound
      by default).
    </para>
    <para>
      Stack unwinding assumes the following preconditions:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          The coroutine is not <emphasis>not-a-coroutine</emphasis>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The coroutine is not complete
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The coroutine is not running
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The coroutine owns a stack
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      After unwinding, a <emphasis>coroutine</emphasis> is complete.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase><phrase role="special">()</phrase> <phrase role="special">&gt;</phrase>    <phrase role="identifier">coro_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;X()&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="special">~</phrase><phrase role="identifier">X</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;~X()&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">fn</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">X</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">for</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fn(): &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
        <phrase role="comment">// transfer execution control back to main()
</phrase>        <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">argc</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*</phrase> <phrase role="identifier">argv</phrase><phrase role="special">[])</phrase>
<phrase role="special">{</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">coro_t</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">),</phrase>
                  <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">attributes</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">default_stacksize</phrase><phrase role="special">(),</phrase>
                    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">stack_unwind</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
        <phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">5</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
        <phrase role="special">{</phrase>
            <phrase role="comment">// transfer execution control to fn()
</phrase>            <phrase role="identifier">c</phrase><phrase role="special">();</phrase>
        <phrase role="special">}</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;c is complete: &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">is_complete</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;Done&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_SUCCESS</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">output</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">()</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="number">0</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="number">1</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="number">2</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="number">3</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="number">4</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="number">5</phrase>
    <phrase role="identifier">c</phrase> <phrase role="identifier">is</phrase> <phrase role="identifier">complete</phrase><phrase role="special">:</phrase> <phrase role="keyword">false</phrase>
    <phrase role="special">~</phrase><phrase role="identifier">X</phrase><phrase role="special">()</phrase>
    <phrase role="identifier">Done</phrase>
</programlisting>
    <important>
      <para>
        You must not swallow <emphasis>forced_unwind</emphasis> exceptions!
      </para>
    </important>
    <anchor id="coroutine.coroutine.fpu_preserving"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.coroutine.fpu_preserving">FPU preserving</link>
    </bridgehead>
    <para>
      Some applications do not use floating-point registers and can disable preserving
      fpu registers for performance reasons.
    </para>
    <note>
      <para>
        According to the ABIs the FPU registers are preserved by default.
      </para>
    </note>
    <section id="coroutine.coroutine.coroutine">
      <title><link linkend="coroutine.coroutine.coroutine">Class <code><phrase role="identifier">coroutine</phrase></code></link></title>
      
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">/</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase>
    <phrase role="keyword">typename</phrase> <phrase role="identifier">Signature</phrase><phrase role="special">,</phrase>
    <phrase role="keyword">typename</phrase> <phrase role="identifier">StackAllocator</phrase> <phrase role="special">=</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">stack_allocator</phrase>
<phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">coroutine</phrase><phrase role="special">;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase>
    <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase>
    <phrase role="keyword">typename</phrase> <phrase role="identifier">ArgTypes</phrase><phrase role="special">...</phrase>
<phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">coroutine</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">(</phrase> <phrase role="identifier">ArgTypes</phrase><phrase role="special">...)&gt;</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">self_t</phrase>
    <phrase role="special">{</phrase>
    <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
        <phrase role="identifier">tuple</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">ArgTypes</phrase><phrase role="special">...</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="identifier">R</phrase><phrase role="special">);</phrase>

        <phrase role="keyword">void</phrase> <phrase role="identifier">yield_break</phrase><phrase role="special">();</phrase>
    <phrase role="special">};</phrase>

    <phrase role="identifier">coroutine</phrase><phrase role="special">();</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">StackAllocator</phrase> <phrase role="special">=</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">stack_allocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="special">=</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">alocator</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">&gt;</phrase>
    <phrase role="identifier">coroutine</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">attributes</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">attr</phrase> <phrase role="special">=</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">StackAllocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">stack_alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">StackAllocator</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">StackAllocator</phrase> <phrase role="special">=</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">stack_allocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="special">=</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">alocator</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">&gt;</phrase>
    <phrase role="identifier">coroutine</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">attributes</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">attr</phrase> <phrase role="special">=</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">StackAllocator</phrase> <phrase role="identifier">stack_alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">StackAllocator</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>

    <phrase role="identifier">coroutine</phrase><phrase role="special">(</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">-</phrase><phrase role="keyword">bool</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="identifier">is_complete</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">R</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase role="identifier">a0</phrase><phrase role="special">,</phrase> <phrase role="special">...,</phrase> <phrase role="identifier">A9</phrase> <phrase role="identifier">a9</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">l</phrase><phrase role="special">,</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__identifier__coroutine__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__identifier__coroutine__phrase__phrase_role__special______phrase___code_"><code><phrase
        role="identifier">coroutine</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Creates a coroutine representing a <emphasis>not-a-coroutine</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__coroutine__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__coroutine__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase
        role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase
        role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase
        role="identifier">StackAllocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase>
        <phrase role="special">&gt;</phrase> <phrase role="identifier">coroutine</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">attributes</phrase>
        <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase>
        <phrase role="identifier">attr</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">StackAllocator</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">stack_alloc</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">Allocator</phrase> <phrase
        role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase
        role="identifier">alloc</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Preconditions:</term>
          <listitem>
            <para>
              <code><phrase role="identifier">size</phrase></code> &gt; ctx::minimum_stacksize(),
              <code><phrase role="identifier">size</phrase></code> &lt; ctx::maximum_stacksize()
              when ! ctx::is_stack_unbound().
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Creates a coroutine which will execute <code><phrase role="identifier">fn</phrase></code>.
              If the attribute <code><phrase role="identifier">attr</phrase></code>
              is constructed with <code><phrase role="identifier">stack_unwind</phrase></code>
              the destructor of <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              unwinds the stack before destructing it. If <code><phrase role="identifier">preserve_fpu</phrase></code>
              is <code><phrase role="keyword">true</phrase></code> the floating-point
              registers are preserved between context switches. For allocating/deallocating
              the stack <code><phrase role="identifier">stack_alloc</phrase></code>
              is used. For allocating internal data Allocator is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__coroutine__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__coroutine__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase
        role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase
        role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase
        role="identifier">StackAllocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase>
        <phrase role="special">&gt;</phrase> <phrase role="identifier">coroutine</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="special">&amp;&amp;</phrase>
        <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase
        role="identifier">attributes</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">attr</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">StackAllocator</phrase>
        <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase>
        <phrase role="identifier">stack_alloc</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase
        role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Preconditions:</term>
          <listitem>
            <para>
              <code><phrase role="identifier">size</phrase></code> &gt; ctx::minimum_stacksize(),
              <code><phrase role="identifier">size</phrase></code> &lt; ctx::maximum_stacksize()
              when ! ctx::is_stack_unbound().
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Creates a coroutine which will execute <code><phrase role="identifier">fn</phrase></code>.
              If the attribute <code><phrase role="identifier">attr</phrase></code>
              is constructed with <code><phrase role="identifier">stack_unwind</phrase></code>
              the destructor of <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              unwinds the stack before destructing it. If <code><phrase role="identifier">preserve_fpu</phrase></code>
              is <code><phrase role="keyword">true</phrase></code> the floating-point
              registers are preserved between context switches. For allocating/deallocating
              the stack <code><phrase role="identifier">stack_alloc</phrase></code>
              is used. For allocating internal data Allocator is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__identifier__coroutine__phrase__phrase_role__special_____phrase___phrase_role__identifier__coroutine__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__identifier__coroutine__phrase__phrase_role__special_____phrase___phrase_role__identifier__coroutine__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="identifier">coroutine</phrase><phrase role="special">(</phrase> <phrase
        role="identifier">coroutine</phrase> <phrase role="special">&amp;&amp;</phrase>
        <phrase role="identifier">other</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Moves the internal data of <code><phrase role="identifier">other</phrase></code>
              to <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>.
              <code><phrase role="identifier">other</phrase></code> becomes <emphasis>not-a-coroutine</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__identifier__coroutine__phrase___phrase_role__special___amp___phrase___phrase_role__keyword__operator__phrase__phrase_role__special______phrase___phrase_role__identifier__coroutine__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__identifier__coroutine__phrase___phrase_role__special___amp___phrase___phrase_role__keyword__operator__phrase__phrase_role__special______phrase___phrase_role__identifier__coroutine__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="identifier">coroutine</phrase> <phrase role="special">&amp;</phrase>
        <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase>
        <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;&amp;</phrase>
        <phrase role="identifier">other</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Destroys the internal data of <code><phrase role="special">*</phrase><phrase
              role="keyword">this</phrase></code> and moves the internal data of
              <code><phrase role="identifier">other</phrase></code> to <code><phrase
              role="special">*</phrase><phrase role="keyword">this</phrase></code>.
              <code><phrase role="identifier">other</phrase></code> becomes <emphasis>not-a-coroutine</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified__phrase__phrase_role__special_____phrase__phrase_role__keyword__bool__phrase__phrase_role__special_____phrase__phrase_role__identifier__type__phrase__phrase_role__special______phrase___phrase_role__keyword__const__phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified__phrase__phrase_role__special_____phrase__phrase_role__keyword__bool__phrase__phrase_role__special_____phrase__phrase_role__identifier__type__phrase__phrase_role__special______phrase___phrase_role__keyword__const__phrase___code_"><code><phrase
        role="keyword">operator</phrase> <phrase role="identifier">unspecified</phrase><phrase
        role="special">-</phrase><phrase role="keyword">bool</phrase><phrase role="special">-</phrase><phrase
        role="identifier">type</phrase><phrase role="special">()</phrase> <phrase
        role="keyword">const</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Returns:</term>
          <listitem>
            <para>
              If <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              refers to <emphasis>not-a-coroutine</emphasis>, the function returns
              false. Otherwise true.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__keyword__bool__phrase___phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__keyword__const__phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__keyword__bool__phrase___phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__keyword__const__phrase___code_"><code><phrase
        role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase
        role="special">!()</phrase> <phrase role="keyword">const</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Returns:</term>
          <listitem>
            <para>
              If <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              refers not to <emphasis>not-a-coroutine</emphasis>, the function returns
              true. Otherwise false.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__keyword__void__phrase___phrase_role__identifier__swap__phrase__phrase_role__special_____phrase___phrase_role__identifier__coroutine__phrase___phrase_role__special___amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__keyword__void__phrase___phrase_role__identifier__swap__phrase__phrase_role__special_____phrase___phrase_role__identifier__coroutine__phrase___phrase_role__special___amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">coroutine</phrase> <phrase
        role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase
        role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Swaps the internal data from <code><phrase role="special">*</phrase><phrase
              role="keyword">this</phrase></code> with the values of <code><phrase
              role="identifier">other</phrase></code>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__keyword__bool__phrase___phrase_role__identifier__is_complete__phrase__phrase_role__special______phrase___phrase_role__keyword__const__phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__keyword__bool__phrase___phrase_role__identifier__is_complete__phrase__phrase_role__special______phrase___phrase_role__keyword__const__phrase___code_"><code><phrase
        role="keyword">bool</phrase> <phrase role="identifier">is_complete</phrase><phrase
        role="special">()</phrase> <phrase role="keyword">const</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Preconditions:</term>
          <listitem>
            <para>
              <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              is not a <emphasis>not-a-coroutine</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Returns <code><phrase role="keyword">true</phrase></code> if coroutine-function
              of <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              has returned.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__identifier__r__phrase___phrase_role__keyword__operator__phrase__phrase_role__special_______phrase__phrase_role__identifier__a0__phrase___phrase_role__identifier__a0__phrase__phrase_role__special_____phrase___phrase_role__identifier__a9__phrase___phrase_role__identifier__a9__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__identifier__r__phrase___phrase_role__keyword__operator__phrase__phrase_role__special_______phrase__phrase_role__identifier__a0__phrase___phrase_role__identifier__a0__phrase__phrase_role__special_____phrase___phrase_role__identifier__a9__phrase___phrase_role__identifier__a9__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="identifier">R</phrase> <phrase role="keyword">operator</phrase><phrase
        role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase
        role="identifier">a0</phrase><phrase role="special">,</phrase> <phrase role="identifier">A9</phrase>
        <phrase role="identifier">a9</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Preconditions:</term>
          <listitem>
            <para>
              <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              is not a <emphasis>not-a-coroutine</emphasis>, <code><phrase role="special">!</phrase>
              <phrase role="identifier">is_complete</phrase><phrase role="special">()</phrase></code>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              <emphasis>coroutine-function</emphasis> is entered and the arguments
              are passed to the <emphasis>coroutine</emphasis>. The return value
              is the argument passed to <emphasis>coroutine&lt;&gt;::self_t::yield()</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              <emphasis>coroutine_terminated</emphasis> if <emphasis>coroutine&lt;&gt;::self_t::yield_break()</emphasis>
              was called or other exceptions thrown inside <emphasis>coroutine-function</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__identifier__t__phrase___phrase_role__identifier__self_t__phrase__phrase_role__special______phrase__phrase_role__identifier__yield__phrase__phrase_role__special_____phrase___phrase_role__identifier__r__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__identifier__t__phrase___phrase_role__identifier__self_t__phrase__phrase_role__special______phrase__phrase_role__identifier__yield__phrase__phrase_role__special_____phrase___phrase_role__identifier__r__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="identifier">T</phrase> <phrase role="identifier">self_t</phrase><phrase
        role="special">::</phrase><phrase role="identifier">yield</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">R</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Gives execution control back to calling context by returning a value
              of type R. The return type of this function is a <emphasis>boost::tuple&lt;&gt;</emphasis>
              containing the arguments passed to <emphasis>coroutine&lt;&gt;::operator()()</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine._code__phrase_role__keyword__void__phrase___phrase_role__identifier__self_t__phrase__phrase_role__special______phrase__phrase_role__identifier__yield_break__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine._code__phrase_role__keyword__void__phrase___phrase_role__identifier__self_t__phrase__phrase_role__special______phrase__phrase_role__identifier__yield_break__phrase__phrase_role__special______phrase___code_"><code><phrase
        role="keyword">void</phrase> <phrase role="identifier">self_t</phrase><phrase
        role="special">::</phrase><phrase role="identifier">yield_break</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Gives execution control back to calling context and sets the <emphasis>coroutine</emphasis>
              to be complete. <emphasis>coroutine&lt;&gt;::operator()()</emphasis>
              in the other coroutine throws exception <emphasis>coroutine_terminated</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Postconditions:</term>
          <listitem>
            <para>
              <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              is complete, which is <code><phrase role="identifier">is_complete</phrase><phrase
              role="special">()</phrase></code> returns <code><phrase role="keyword">true</phrase></code>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.coroutine.coroutine.non_member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.coroutine.coroutine.non_member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special______phrase___code_">Non-member
        function <code><phrase role="identifier">swap</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">l</phrase><phrase role="special">,</phrase> <phrase role="identifier">coroutine</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              As if 'l.swap( r)'.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="coroutine.coroutine.example">
      <title><link linkend="coroutine.coroutine.example">Example: input iterator</link></title>
      <para>
        This exmplae shows how a <emphasis>coroutine</emphasis> is used together
        with an input stream and <emphasis role="bold">Boost.Asio</emphasis> in a
        service. The input stream reads its data from a TCP socket line by line,
        e.g. the messages are delimetered by newline.
      </para>
      
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">session</phrase> <phrase role="special">:</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// handle input
</phrase>    <phrase role="keyword">void</phrase> <phrase role="identifier">handle_read_</phrase><phrase role="special">(</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">system</phrase><phrase role="special">::</phrase><phrase role="identifier">error_code</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">ec</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="special">!</phrase> <phrase role="identifier">ec</phrase><phrase role="special">)</phrase>
        <phrase role="special">{</phrase>
            <phrase role="identifier">inbuf</phrase> <phrase role="identifier">buf</phrase><phrase role="special">(</phrase> <phrase role="identifier">socket_</phrase><phrase role="special">,</phrase> <phrase role="identifier">coro_</phrase><phrase role="special">,</phrase> <phrase role="identifier">self</phrase><phrase role="special">);</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">istream</phrase> <phrase role="identifier">s</phrase><phrase role="special">(</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">buf</phrase><phrase role="special">);</phrase>

            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">line</phrase><phrase role="special">;</phrase>

            <phrase role="comment">// loop until we getan 'exit' message
</phrase>            <phrase role="keyword">do</phrase>
            <phrase role="special">{</phrase>
                <phrase role="comment">// read message
</phrase>                <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">getline</phrase><phrase role="special">(</phrase> <phrase role="identifier">s</phrase><phrase role="special">,</phrase> <phrase role="identifier">line</phrase><phrase role="special">);</phrase>
                <phrase role="comment">// print message
</phrase>                <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">line</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase> 
            <phrase role="special">}</phrase> <phrase role="keyword">while</phrase> <phrase role="special">(</phrase> <phrase role="identifier">line</phrase> <phrase role="special">!=</phrase> <phrase role="string">&quot;exit&quot;</phrase><phrase role="special">);</phrase>
        <phrase role="special">}</phrase>
        <phrase role="identifier">io_service_</phrase><phrase role="special">.</phrase><phrase role="identifier">post</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase>
                <phrase role="special">&amp;</phrase> <phrase role="identifier">session</phrase><phrase role="special">::</phrase><phrase role="identifier">destroy_</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">destroy_</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase> <phrase role="keyword">delete</phrase> <phrase role="keyword">this</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="identifier">coro_t</phrase>                          <phrase role="identifier">coro_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">asio</phrase><phrase role="special">::</phrase><phrase role="identifier">io_service</phrase>     <phrase role="special">&amp;</phrase>   <phrase role="identifier">io_service_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">asio</phrase><phrase role="special">::</phrase><phrase role="identifier">ip</phrase><phrase role="special">::</phrase><phrase role="identifier">tcp</phrase><phrase role="special">::</phrase><phrase role="identifier">socket</phrase>    <phrase role="identifier">socket_</phrase><phrase role="special">;</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">session</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">asio</phrase><phrase role="special">::</phrase><phrase role="identifier">io_service</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">io_service</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="comment">// create coroutine executing handle_read_() as coroutine fucntion 
</phrase>        <phrase role="identifier">coro_</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">session</phrase><phrase role="special">::</phrase><phrase role="identifier">handle_read_</phrase><phrase role="special">,</phrase> <phrase role="keyword">this</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="identifier">_2</phrase><phrase role="special">,</phrase> <phrase role="identifier">_3</phrase><phrase role="special">)</phrase> <phrase role="special">),</phrase>
        <phrase role="identifier">io_service_</phrase><phrase role="special">(</phrase> <phrase role="identifier">io_service</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">socket_</phrase><phrase role="special">(</phrase> <phrase role="identifier">io_service_</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;serivce()&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="special">~</phrase><phrase role="identifier">session</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;~serivce()&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">asio</phrase><phrase role="special">::</phrase><phrase role="identifier">ip</phrase><phrase role="special">::</phrase><phrase role="identifier">tcp</phrase><phrase role="special">::</phrase><phrase role="identifier">socket</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">socket</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">socket_</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">start</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">coro_</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">system</phrase><phrase role="special">::</phrase><phrase role="identifier">error_code</phrase><phrase role="special">(),</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>
</programlisting>
      <para>
        Class <code><phrase role="identifier">session</phrase></code> is created
        by server (acceptor) ifor each connection request and handles the communication
        with the client. <emphasis>io_service</emphasis> dispatches to a <code><phrase
        role="identifier">session</phrase></code> instance if bytes are available
        in the socket buffer. Each message is read via <code><phrase role="identifier">getline</phrase><phrase
        role="special">()</phrase></code> from the input stream. If no more bytes
        can be read from the socket and the last byte was not an newline char the
        application would usally block inside <code><phrase role="identifier">getline</phrase><phrase
        role="special">()</phrase></code> (== inside <code><phrase role="identifier">underflow</phrase><phrase
        role="special">()</phrase></code> of the stream buffer).
      </para>
      <para>
        With the help of a <emphasis>coroutine</emphasis> the application can jump
        to <emphasis>io_service</emphasis> in order to dispatch other event until
        additional bytes can be read from the socket.
      </para>
      
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">inbuf</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">streambuf</phrase><phrase role="special">,</phrase>
              <phrase role="keyword">private</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">private</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">streamsize</phrase>        <phrase role="identifier">pb_size</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">enum</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">bf_size</phrase> <phrase role="special">=</phrase> <phrase role="number">16</phrase> <phrase role="special">};</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">fetch_</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">streamsize</phrase> <phrase role="identifier">num</phrase> <phrase role="special">=</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">min</phrase><phrase role="special">(</phrase>
            <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">streamsize</phrase> <phrase role="special">&gt;(</phrase> <phrase role="identifier">gptr</phrase><phrase role="special">()</phrase> <phrase role="special">-</phrase> <phrase role="identifier">eback</phrase><phrase role="special">()</phrase> <phrase role="special">),</phrase> <phrase role="identifier">pb_size</phrase><phrase role="special">);</phrase>

        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">memmove</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="special">(</phrase> <phrase role="identifier">pb_size</phrase> <phrase role="special">-</phrase> <phrase role="identifier">num</phrase><phrase role="special">),</phrase>
            <phrase role="identifier">gptr</phrase><phrase role="special">()</phrase> <phrase role="special">-</phrase> <phrase role="identifier">num</phrase><phrase role="special">,</phrase> <phrase role="identifier">num</phrase><phrase role="special">);</phrase>

        <phrase role="comment">// request to read some bytes from socket
</phrase>        <phrase role="comment">// coroutine will be resumed() in callback after
</phrase>        <phrase role="comment">// some bytes are available in the socket buffer
</phrase>        <phrase role="identifier">s_</phrase><phrase role="special">.</phrase><phrase role="identifier">async_read_some</phrase><phrase role="special">(</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">asio</phrase><phrase role="special">::</phrase><phrase role="identifier">buffer</phrase><phrase role="special">(</phrase> <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="identifier">pb_size</phrase><phrase role="special">,</phrase> <phrase role="identifier">bf_size</phrase> <phrase role="special">-</phrase> <phrase role="identifier">pb_size</phrase><phrase role="special">),</phrase>
                <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="keyword">operator</phrase><phrase role="special">(),</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">coro_</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="identifier">_2</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
        <phrase role="comment">// yield this coroutine function == jumping back to io_service
</phrase>        <phrase role="identifier">tuple_t</phrase> <phrase role="identifier">tpl</phrase> <phrase role="special">=</phrase> <phrase role="identifier">self_</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">();</phrase>
        <phrase role="comment">// coroutine was resumend by io_service
</phrase>        <phrase role="comment">// because some bytes can be read from socket buffer
</phrase>        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">system</phrase><phrase role="special">::</phrase><phrase role="identifier">error_code</phrase> <phrase role="identifier">ec</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tpl</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">&lt;</phrase> <phrase role="number">0</phrase> <phrase role="special">&gt;();</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">n</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tpl</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">&lt;</phrase> <phrase role="number">1</phrase> <phrase role="special">&gt;();</phrase>
        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">ec</phrase><phrase role="special">)</phrase>
        <phrase role="special">{</phrase>
            <phrase role="comment">// error
</phrase>            <phrase role="identifier">setg</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
            <phrase role="keyword">return</phrase> <phrase role="special">-</phrase><phrase role="number">1</phrase><phrase role="special">;</phrase>
        <phrase role="special">}</phrase>

        <phrase role="comment">// adjust pointers in stream buffer
</phrase>        <phrase role="identifier">setg</phrase><phrase role="special">(</phrase> <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="identifier">pb_size</phrase> <phrase role="special">-</phrase> <phrase role="identifier">num</phrase><phrase role="special">,</phrase> <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="identifier">pb_size</phrase><phrase role="special">,</phrase> <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="identifier">pb_size</phrase> <phrase role="special">+</phrase> <phrase role="identifier">n</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">asio</phrase><phrase role="special">::</phrase><phrase role="identifier">ip</phrase><phrase role="special">::</phrase><phrase role="identifier">tcp</phrase><phrase role="special">::</phrase><phrase role="identifier">socket</phrase>    <phrase role="special">&amp;</phrase>   <phrase role="identifier">s_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">coro_t</phrase>                          <phrase role="special">&amp;</phrase>   <phrase role="identifier">coro_</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase>                  <phrase role="special">&amp;</phrase>   <phrase role="identifier">self_</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">char</phrase>                                <phrase role="identifier">buffer_</phrase><phrase role="special">[</phrase><phrase role="identifier">bf_size</phrase><phrase role="special">];</phrase>

<phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">underflow</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">gptr</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">egptr</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>
            <phrase role="keyword">return</phrase> <phrase role="identifier">traits_type</phrase><phrase role="special">::</phrase><phrase role="identifier">to_int_type</phrase><phrase role="special">(</phrase> <phrase role="special">*</phrase> <phrase role="identifier">gptr</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>

        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="number">0</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">fetch_</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>
            <phrase role="keyword">return</phrase> <phrase role="identifier">traits_type</phrase><phrase role="special">::</phrase><phrase role="identifier">eof</phrase><phrase role="special">();</phrase>
        <phrase role="keyword">else</phrase>
            <phrase role="keyword">return</phrase> <phrase role="identifier">traits_type</phrase><phrase role="special">::</phrase><phrase role="identifier">to_int_type</phrase><phrase role="special">(</phrase> <phrase role="special">*</phrase> <phrase role="identifier">gptr</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">inbuf</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">asio</phrase><phrase role="special">::</phrase><phrase role="identifier">ip</phrase><phrase role="special">::</phrase><phrase role="identifier">tcp</phrase><phrase role="special">::</phrase><phrase role="identifier">socket</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">s</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">coro_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">coro</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">coro_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">s_</phrase><phrase role="special">(</phrase> <phrase role="identifier">s</phrase><phrase role="special">),</phrase> <phrase role="identifier">coro_</phrase><phrase role="special">(</phrase> <phrase role="identifier">coro</phrase><phrase role="special">),</phrase> <phrase role="identifier">self_</phrase><phrase role="special">(</phrase> <phrase role="identifier">self</phrase><phrase role="special">),</phrase> <phrase role="identifier">buffer_</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">setg</phrase><phrase role="special">(</phrase> <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="number">4</phrase><phrase role="special">,</phrase> <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="number">4</phrase><phrase role="special">,</phrase> <phrase role="identifier">buffer_</phrase> <phrase role="special">+</phrase> <phrase role="number">4</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>
<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">streamsize</phrase> <phrase role="identifier">inbuf</phrase><phrase role="special">::</phrase><phrase role="identifier">pb_size</phrase> <phrase role="special">=</phrase> <phrase role="number">4</phrase><phrase role="special">;</phrase>
</programlisting>
      <para>
        In <code><phrase role="identifier">_fetch</phrase><phrase role="special">()</phrase></code>
        called by public function <code><phrase role="identifier">underflow</phrase><phrase
        role="special">()</phrase></code> an read request is send to <emphasis>io_service</emphasis>
        with a callback executing a jump to this coroutine. After this read request
        was send the <emphasis>coroutine</emphasis> is suspended by calling <code><phrase
        role="identifier">yield</phrase><phrase role="special">()</phrase></code>.
        Ifsome bytes arrived in the socker buffer <emphasis>io_service</emphasis>
        calls the callback and resumes the coroutine. The stream can read the arrived
        bytes from the socket and returns from <code><phrase role="identifier">getline</phrase><phrase
        role="special">()</phrase></code> if a newline was in the bytes sequence.
      </para>
    </section>
  </section>
  <section id="coroutine.generator">
    <title><link linkend="coroutine.generator">Generator</link></title>
    <para>
      A <emphasis>generator</emphasis> is a simple coroutine controling the iteration
      behaviour of a loop. It generates a sequence of values, but instead of returning
      them at once, a <emphasis>generator</emphasis> behaves like an iterator yielding
      a values one at the time if it is called.
    </para>
    <para>
      Each instance of <emphasis>generator</emphasis> represents a context (CPU registers
      and stack space) of execution or <emphasis>not-a-generator</emphasis>. Objects
      of type <emphasis>generator</emphasis> are moveable but not copyable and can
      be returned by a function.
    </para>
    
<programlisting><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">generator</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">f</phrase><phrase role="special">();</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">generator</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">c</phrase><phrase role="special">(</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>
    <phrase role="identifier">c</phrase><phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
    <warning>
      <para>
        If <emphasis>generator</emphasis> is used in a multithreaded application,
        it can migrated between threads, but must not reference <emphasis>thread-local
        storage</emphasis>.
      </para>
    </warning>
    <note>
      <para>
        <emphasis role="bold">Boost.Move</emphasis> is used to emulate rvalue references.
      </para>
    </note>
    <note>
      <para>
        If <emphasis>fiber-local storage</emphasis> is used on Windows, the user
        is responsible for calling <emphasis>::FlsAlloc()</emphasis>, <emphasis>::FlsFree()</emphasis>.
      </para>
    </note>
    <anchor id="coroutine.generator.executing_a_generator"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.generator.executing_a_generator">Executing a generator</link>
    </bridgehead>
    <para>
      A new <emphasis>generator</emphasis> is created from a callable object (known
      as the <emphasis>generator-function</emphasis>). The stack size, stack unwinding
      and floating-point preserving behavior are determined by additional arguments.
    </para>
    <para>
      The <emphasis>generator</emphasis> constructor uses the <emphasis>StackStackAllocator
      concept</emphasis> from <emphasis role="bold">Boost.Context</emphasis> to allocate
      an associated stack, and the destructor uses the same <emphasis>StackStackAllocator
      concept</emphasis> to deallocate the stack. The default <emphasis>StackStackAllocator
      concept</emphasis> is <emphasis>ctx::stack_allocator</emphasis>, but a custom
      stack-allocator can be passed to the constructor (see documentation of <emphasis
      role="bold">Boost.Context</emphasis>).
    </para>
    <para>
      The first argument of <emphasis>generator-function</emphasis> must be of type
      <emphasis>generator&lt;&gt;::self_t</emphasis>, used for yielding the active
      generator.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">generator</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">gen_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase> <phrase role="identifier">gen_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="special">...</phrase>
    <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="number">11</phrase><phrase role="special">);</phrase>
    <phrase role="special">...</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">gen_t</phrase> <phrase role="identifier">g</phrase><phrase role="special">(</phrase> <phrase role="identifier">f</phrase><phrase role="special">);</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">y</phrase> <phrase role="special">=</phrase> <phrase role="identifier">g</phrase><phrase role="special">();</phrase>
</programlisting>
    <para>
      <emphasis>generator-function</emphasis> must return <code><phrase role="keyword">void</phrase></code>
      and accept one parameter of type <code><emphasis>generator&lt;&gt;::self_t</emphasis></code>.
      Use <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">bind</phrase><phrase role="special">()</phrase></code> if
      it is required to passed additional parameters to <emphasis>generator-function</emphasis>
      (bound by <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">bind</phrase><phrase role="special">()</phrase></code>).
      If a reference is required, use boost::ref.
    </para>
    <para>
      Usally a <emphasis>generator</emphasis> is called inside loops. The <emphasis>generator-function</emphasis>
      executed until <emphasis>generator&lt;&gt;::self_t::yield()</emphasis> is called.
      The value passed to <emphasis>generator&lt;&gt;::self_t::yield()</emphasis>
      is used as the generated value. The next time the same <emphasis>generator</emphasis>
      is called in a subsequent iteration, the execution of the <emphasis>generator-function</emphasis>
      is resumed after <emphasis>generator&lt;&gt;::self_t::yield()</emphasis>, until
      <emphasis>generator&lt;&gt;::self_t::yield()</emphasis> is called again. <emphasis>generator-function</emphasis>
      can be terminated by <emphasis>generator&lt;&gt;::self_t::yield_break()</emphasis>,
      at which time the loop enclosing the <emphasis>generator</emphasis> is terminated.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">generator</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase>    <phrase role="identifier">gen_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">power</phrase><phrase role="special">(</phrase> <phrase role="identifier">gen_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">number</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">exponent</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">counter</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">while</phrase> <phrase role="special">(</phrase> <phrase role="identifier">counter</phrase><phrase role="special">++</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">exponent</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">result</phrase> <phrase role="special">*</phrase> <phrase role="identifier">number</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">gen_t</phrase> <phrase role="identifier">pw</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">power</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase> <phrase role="number">8</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
        <phrase role="keyword">while</phrase> <phrase role="special">(</phrase> <phrase role="identifier">pw</phrase><phrase role="special">)</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">pw</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase>  <phrase role="string">&quot; &quot;</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\nDone&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_SUCCESS</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">output</phrase><phrase role="special">:</phrase>
    <phrase role="number">2</phrase> <phrase role="number">4</phrase> <phrase role="number">8</phrase> <phrase role="number">16</phrase> <phrase role="number">32</phrase> <phrase role="number">64</phrase> <phrase role="number">128</phrase> <phrase role="number">256</phrase>
    <phrase role="identifier">Done</phrase>
</programlisting>
    <para>
      <emphasis>generator-function</emphasis> is invoked the first time inside the
      constructor of <emphasis>generator</emphasis> (pre-fetching an retur nvalue).
      <emphasis>generator&lt;&gt;::operator()()</emphasis> can be called as long
      as <emphasis>generator</emphasis> remains valid (has an value to return), e.g.
      <emphasis>generator&lt;&gt;::operator unspecified_bool_type()</emphasis> returns
      <code><phrase role="keyword">true</phrase></code>.
    </para>
    
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">coro</phrase><phrase role="special">::</phrase><phrase role="identifier">generator</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">gen_t</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">fn</phrase><phrase role="special">(</phrase> <phrase role="identifier">gen_t</phrase><phrase role="special">::</phrase><phrase role="identifier">self_t</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">j</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">for</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">j</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fn(): local variable i == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

        <phrase role="comment">// save current generator
</phrase>        <phrase role="comment">// value of local variable is preserved
</phrase>        <phrase role="comment">// transfer execution control back to main()
</phrase>        <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

        <phrase role="comment">// generator&lt;&gt;::operator()() was called
</phrase>        <phrase role="comment">// execution control transfered back from main()    
</phrase>    <phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">main</phrase><phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">argc</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*</phrase> <phrase role="identifier">argv</phrase><phrase role="special">[])</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">gen_t</phrase> <phrase role="identifier">g</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase> <phrase role="number">7</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

    <phrase role="keyword">while</phrase> <phrase role="special">(</phrase> <phrase role="identifier">g</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="comment">// execution control is transfered to g
</phrase>        <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">g</phrase><phrase role="special">();</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;main(): generated == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

        <phrase role="comment">// yield() was called within fn()
</phrase>    <phrase role="special">}</phrase>

    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;Done&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">return</phrase> <phrase role="identifier">EXIT_SUCCESS</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">output</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">generated</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">generated</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">2</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">generated</phrase> <phrase role="special">==</phrase> <phrase role="number">2</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">generated</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">4</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">generated</phrase> <phrase role="special">==</phrase> <phrase role="number">4</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">5</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">generated</phrase> <phrase role="special">==</phrase> <phrase role="number">5</phrase>
    <phrase role="identifier">fn</phrase><phrase role="special">():</phrase> <phrase role="identifier">local</phrase> <phrase role="identifier">variable</phrase> <phrase role="identifier">i</phrase> <phrase role="special">==</phrase> <phrase role="number">6</phrase>
    <phrase role="identifier">main</phrase><phrase role="special">():</phrase> <phrase role="identifier">generated</phrase> <phrase role="special">==</phrase> <phrase role="number">6</phrase>
    <phrase role="identifier">Done</phrase>
</programlisting>
    <warning>
      <para>
        Calling <emphasis>generator&lt;&gt;::operator()()</emphasis> from inside
        the same generator results in undefined behaviour.
      </para>
    </warning>
    <note>
      <para>
        In contrast to threads, which are preemtive, <emphasis>generator</emphasis>
        switches are cooperative (programmer controls when switch will happen). The
        kernel is not involved in the generator switches.
      </para>
    </note>
    <anchor id="coroutine.generator.exceptions_in__emphasis_generator_function__emphasis_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.generator.exceptions_in__emphasis_generator_function__emphasis_">Exceptions
      in <emphasis>generator-function</emphasis></link>
    </bridgehead>
    <para>
      An excepton thrown inside <emphasis>generator-function</emphasis> (transfered
      via exception-pointer - see <emphasis role="bold">Boost.Exception</emphasis>
      for details and requirements) will be re-thrown by <emphasis>generator&lt;&gt;::operator()()</emphasis>.
    </para>
    <important>
      <para>
        Code executed by generator must not prevent the propagation of the <emphasis>forced_unwind</emphasis>
        exception. Absorbing that exception will cause stack unwinding to fail. Thus,
        any code that catches all exceptions must rethrow the pending exception.
      </para>
    </important>
    
<programlisting><phrase role="keyword">try</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// code that might throw
</phrase><phrase role="special">}</phrase>
<phrase role="keyword">catch</phrase><phrase role="special">(</phrase> <phrase role="identifier">forced_unwind</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">throw</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
<phrase role="keyword">catch</phrase><phrase role="special">(...)</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// possibly not rethrow pending exception
</phrase><phrase role="special">}</phrase>
</programlisting>
    <anchor id="coroutine.generator.stack_unwinding"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.generator.stack_unwinding">Stack unwinding</link>
    </bridgehead>
    <para>
      Sometimes it is necessary to unwind the stack of an unfinished generator to
      destroy local stack variables so they can release allocated resources (RAII
      pattern). The third argument of the generator constructor, <code><phrase role="identifier">do_unwind</phrase></code>,
      indicates whether the destructor should unwind the stack (unwind stack as default).
    </para>
    <para>
      Stack unwinding assumes the following preconditions:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          The generator is not <emphasis>not-a-generator</emphasis>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The generator is not complete
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The generator is not running
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The generator owns a stack
        </simpara>
      </listitem>
    </itemizedlist>
    <para>
      After unwinding, a <emphasis>generator</emphasis> is complete.
    </para>
    <important>
      <para>
        You must not swallow <emphasis>forced_unwind</emphasis> exceptions!
      </para>
    </important>
    <anchor id="coroutine.generator.fpu_preserving"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.generator.fpu_preserving">FPU preserving</link>
    </bridgehead>
    <para>
      Some applications do not use floating-point registers and can disable preserving
      fpu registers for perfromance reasons.
    </para>
    <note>
      <para>
        According to the ABIs the FPU registers are preserved by default.
      </para>
    </note>
    <section id="coroutine.generator.generator">
      <title><link linkend="coroutine.generator.generator">Class <code><phrase role="identifier">generator</phrase></code></link></title>
      
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">coroutine</phrase><phrase role="special">/</phrase><phrase role="identifier">generator</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">generator</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">self_t</phrase>
    <phrase role="special">{</phrase>
    <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
        <phrase role="keyword">void</phrase> <phrase role="identifier">yield</phrase><phrase role="special">(</phrase> <phrase role="identifier">R</phrase><phrase role="special">);</phrase>
    <phrase role="special">};</phrase>

    <phrase role="identifier">generator</phrase><phrase role="special">();</phrase>

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">StackAllocator</phrase> <phrase role="special">=</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">stack_allocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="special">=</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">alocator</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">&gt;</phrase>
    <phrase role="identifier">generator</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">attributes</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">attr</phrase> <phrase role="special">=</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">StackAllocator</phrase> <phrase role="identifier">stack_alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">StackAllocator</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase> 

    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">StackAllocator</phrase> <phrase role="special">=</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">stack_allocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase> <phrase role="special">=</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">alocator</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="special">&gt;</phrase>
    <phrase role="identifier">generator</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">attributes</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">attr</phrase> <phrase role="special">=</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">StackAllocator</phrase> <phrase role="identifier">stack_alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">StackAllocator</phrase><phrase role="special">(),</phrase>
               <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Allocator</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase> 

    <phrase role="identifier">generator</phrase><phrase role="special">(</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">generator</phrase> <phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">-</phrase><phrase role="keyword">bool</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">R</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()();</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">l</phrase><phrase role="special">,</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
      <anchor id="coroutine.generator.generator._code__phrase_role__identifier__generator__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__identifier__generator__phrase__phrase_role__special______phrase___code_"><code><phrase
        role="identifier">generator</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Creates a generator representing a <emphasis>not-a-generator</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__generator__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__generator__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase
        role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase
        role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase
        role="identifier">StackAllocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase>
        <phrase role="special">&gt;</phrase> <phrase role="identifier">generator</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">attributes</phrase>
        <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase>
        <phrase role="identifier">attr</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">StackAllocator</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">stack_alloc</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">Allocator</phrase> <phrase
        role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase
        role="identifier">alloc</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Preconditions:</term>
          <listitem>
            <para>
              <code><phrase role="identifier">size</phrase></code> &gt; ctx::minimum_stacksize(),
              <code><phrase role="identifier">size</phrase></code> &lt; ctx::maximum_stacksize()
              when ! ctx::is_stack_unbound().
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Creates a generator which will execute <code><phrase role="identifier">fn</phrase></code>.
              If the attribute <code><phrase role="identifier">attr</phrase></code>
              is iconstructed with <code><phrase role="identifier">stack_unwind</phrase></code>
              the destructor of <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              unwinds the stack before destructing it. If <code><phrase role="identifier">preserve_fpu</phrase></code>
              is <code><phrase role="keyword">true</phrase></code> the floating-point
              registers are preserved between context switches. For allocating/deallocating
              the stack <code><phrase role="identifier">stack_alloc</phrase></code>
              is used. For allocating internal data Allocator is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__generator__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__keyword__template__phrase__phrase_role__special___lt___phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__stackallocator__phrase__phrase_role__special_____phrase___phrase_role__keyword__typename__phrase___phrase_role__identifier__allocator__phrase___phrase_role__special___gt___phrase_____________phrase_role__identifier__generator__phrase__phrase_role__special_____phrase___phrase_role__identifier__fn__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__fn__phrase__phrase_role__special_____phrase___phrase_role__identifier__attributes__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___phrase_role__identifier__stackallocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__stack_alloc__phrase__phrase_role__special_____phrase___phrase_role__identifier__allocator__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__alloc__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase
        role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase
        role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase
        role="identifier">StackAllocator</phrase><phrase role="special">,</phrase>
        <phrase role="keyword">typename</phrase> <phrase role="identifier">Allocator</phrase>
        <phrase role="special">&gt;</phrase> <phrase role="identifier">generator</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="special">&amp;&amp;</phrase>
        <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase
        role="identifier">attributes</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">attr</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">StackAllocator</phrase>
        <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase>
        <phrase role="identifier">stack_alloc</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">Allocator</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">alloc</phrase><phrase
        role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Preconditions:</term>
          <listitem>
            <para>
              <code><phrase role="identifier">size</phrase></code> &gt; ctx::minimum_stacksize(),
              <code><phrase role="identifier">size</phrase></code> &lt; ctx::maximum_stacksize()
              when ! ctx::is_stack_unbound().
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Creates a generator which will execute <code><phrase role="identifier">fn</phrase></code>.
              If the attribute <code><phrase role="identifier">attr</phrase></code>
              is iconstructed with <code><phrase role="identifier">stack_unwind</phrase></code>
              the destructor of <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              unwinds the stack before destructing it. If <code><phrase role="identifier">preserve_fpu</phrase></code>
              is <code><phrase role="keyword">true</phrase></code> the floating-point
              registers are preserved between context switches. For allocating/deallocating
              the stack <code><phrase role="identifier">stack_alloc</phrase></code>
              is used. For allocating internal data Allocator is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__identifier__generator__phrase__phrase_role__special_____phrase___phrase_role__identifier__generator__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__identifier__generator__phrase__phrase_role__special_____phrase___phrase_role__identifier__generator__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="identifier">generator</phrase><phrase role="special">(</phrase> <phrase
        role="identifier">generator</phrase> <phrase role="special">&amp;&amp;</phrase>
        <phrase role="identifier">other</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Moves the internal data of <code><phrase role="identifier">other</phrase></code>
              to <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>.
              <code><phrase role="identifier">other</phrase></code> becomes <emphasis>not-a-generator</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__identifier__generator__phrase___phrase_role__special___amp___phrase___phrase_role__keyword__operator__phrase__phrase_role__special______phrase___phrase_role__identifier__generator__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__identifier__generator__phrase___phrase_role__special___amp___phrase___phrase_role__keyword__operator__phrase__phrase_role__special______phrase___phrase_role__identifier__generator__phrase___phrase_role__special___amp__amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="identifier">generator</phrase> <phrase role="special">&amp;</phrase>
        <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase>
        <phrase role="identifier">generator</phrase> <phrase role="special">&amp;&amp;</phrase>
        <phrase role="identifier">other</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Destroys the internal data of <code><phrase role="special">*</phrase><phrase
              role="keyword">this</phrase></code> and moves the internal data of
              <code><phrase role="identifier">other</phrase></code> to <code><phrase
              role="special">*</phrase><phrase role="keyword">this</phrase></code>.
              <code><phrase role="identifier">other</phrase></code> becomes <emphasis>not-a-generator</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified__phrase__phrase_role__special_____phrase__phrase_role__keyword__bool__phrase__phrase_role__special_____phrase__phrase_role__identifier__type__phrase__phrase_role__special______phrase___phrase_role__keyword__const__phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified__phrase__phrase_role__special_____phrase__phrase_role__keyword__bool__phrase__phrase_role__special_____phrase__phrase_role__identifier__type__phrase__phrase_role__special______phrase___phrase_role__keyword__const__phrase___code_"><code><phrase
        role="keyword">operator</phrase> <phrase role="identifier">unspecified</phrase><phrase
        role="special">-</phrase><phrase role="keyword">bool</phrase><phrase role="special">-</phrase><phrase
        role="identifier">type</phrase><phrase role="special">()</phrase> <phrase
        role="keyword">const</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Returns:</term>
          <listitem>
            <para>
              If <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              refers to <emphasis>not-a-generator</emphasis>, the function returns
              false. Otherwise true.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__keyword__bool__phrase___phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__keyword__const__phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__keyword__bool__phrase___phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__keyword__const__phrase___code_"><code><phrase
        role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase
        role="special">!()</phrase> <phrase role="keyword">const</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Returns:</term>
          <listitem>
            <para>
              If <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              refers not to <emphasis>not-a-generator</emphasis>, the function returns
              true. Otherwise false.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__keyword__void__phrase___phrase_role__identifier__swap__phrase__phrase_role__special_____phrase___phrase_role__identifier__generator__phrase___phrase_role__special___amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__keyword__void__phrase___phrase_role__identifier__swap__phrase__phrase_role__special_____phrase___phrase_role__identifier__generator__phrase___phrase_role__special___amp___phrase___phrase_role__identifier__other__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">generator</phrase> <phrase
        role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase
        role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Swaps the internal data from <code><phrase role="special">*</phrase><phrase
              role="keyword">this</phrase></code> with the values of <code><phrase
              role="identifier">other</phrase></code>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__identifier__r__phrase___phrase_role__keyword__operator__phrase__phrase_role__special________phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__identifier__r__phrase___phrase_role__keyword__operator__phrase__phrase_role__special________phrase___code_"><code><phrase
        role="identifier">R</phrase> <phrase role="keyword">operator</phrase><phrase
        role="special">()()</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Preconditions:</term>
          <listitem>
            <para>
              <code><phrase role="special">!</phrase> <phrase role="identifier">is_complete</phrase><phrase
              role="special">()</phrase></code>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              The return value is the argument passed to <emphasis>generator&lt;&gt;::self_t::yield()</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Re-throws exceptions exceptions thrown inside <emphasis>generator-function</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator._code__phrase_role__keyword__void__phrase___phrase_role__identifier__self_t__phrase__phrase_role__special______phrase__phrase_role__identifier__yield__phrase__phrase_role__special_____phrase___phrase_role__identifier__r__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator._code__phrase_role__keyword__void__phrase___phrase_role__identifier__self_t__phrase__phrase_role__special______phrase__phrase_role__identifier__yield__phrase__phrase_role__special_____phrase___phrase_role__identifier__r__phrase__phrase_role__special_____phrase___code_"><code><phrase
        role="keyword">void</phrase> <phrase role="identifier">self_t</phrase><phrase
        role="special">::</phrase><phrase role="identifier">yield</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">R</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              Gives execution control back to calling context by returning a value
              of type R.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Throws:</term>
          <listitem>
            <para>
              Nothing.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="coroutine.generator.generator.non_member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="coroutine.generator.generator.non_member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special______phrase___code_">Non-member
        function <code><phrase role="identifier">swap</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">l</phrase><phrase role="special">,</phrase> <phrase role="identifier">generator</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
      <variablelist>
        <title></title>
        <varlistentry>
          <term>Effects:</term>
          <listitem>
            <para>
              As if 'l.swap( r)'.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section id="coroutine.attributes">
    <title><link linkend="coroutine.attributes">Attributes</link></title>
    <para>
      Class <code><phrase role="identifier">attributes</phrase></code> is used to
      transfers parameters required to setup a <code><phrase role="identifier">context</phrase></code>.
    </para>
    
<programlisting><phrase role="keyword">struct</phrase> <phrase role="identifier">attributes</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase>     <phrase role="identifier">size</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">flag_unwind_t</phrase>   <phrase role="identifier">do_unwind</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">bool</phrase>            <phrase role="identifier">preserve_fpu</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">attributes</phrase><phrase role="special">()</phrase> <phrase role="identifier">BOOST_NOEXCEPT</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">(</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">default_stacksize</phrase><phrase role="special">()</phrase> <phrase role="special">),</phrase>
        <phrase role="identifier">do_unwind</phrase><phrase role="special">(</phrase> <phrase role="identifier">stack_unwind</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">preserve_fpu</phrase><phrase role="special">(</phrase> <phrase role="keyword">true</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">size_</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_NOEXCEPT</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">(</phrase> <phrase role="identifier">size_</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">do_unwind</phrase><phrase role="special">(</phrase> <phrase role="identifier">stack_unwind</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">preserve_fpu</phrase><phrase role="special">(</phrase> <phrase role="keyword">true</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase role="identifier">flag_unwind_t</phrase> <phrase role="identifier">do_unwind_</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_NOEXCEPT</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">(</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">default_stacksize</phrase><phrase role="special">()</phrase> <phrase role="special">),</phrase>
        <phrase role="identifier">do_unwind</phrase><phrase role="special">(</phrase> <phrase role="identifier">do_unwind_</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">preserve_fpu</phrase><phrase role="special">(</phrase> <phrase role="keyword">true</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">preserve_fpu_</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_NOEXCEPT</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">(</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">default_stacksize</phrase><phrase role="special">()</phrase> <phrase role="special">),</phrase>
        <phrase role="identifier">do_unwind</phrase><phrase role="special">(</phrase> <phrase role="identifier">stack_unwind</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">preserve_fpu</phrase><phrase role="special">(</phrase> <phrase role="identifier">preserve_fpu_</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">size_</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">flag_unwind_t</phrase> <phrase role="identifier">do_unwind_</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_NOEXCEPT</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">(</phrase> <phrase role="identifier">size_</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">do_unwind</phrase><phrase role="special">(</phrase> <phrase role="identifier">do_unwind_</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">preserve_fpu</phrase><phrase role="special">(</phrase> <phrase role="keyword">true</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">size_</phrase><phrase role="special">,</phrase>
            <phrase role="keyword">bool</phrase> <phrase role="identifier">preserve_fpu_</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_NOEXCEPT</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">(</phrase> <phrase role="identifier">size_</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">do_unwind</phrase><phrase role="special">(</phrase> <phrase role="identifier">stack_unwind</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">preserve_fpu</phrase><phrase role="special">(</phrase> <phrase role="identifier">preserve_fpu_</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>

    <phrase role="keyword">explicit</phrase> <phrase role="identifier">attributes</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">flag_unwind_t</phrase> <phrase role="identifier">do_unwind_</phrase><phrase role="special">,</phrase>
            <phrase role="keyword">bool</phrase> <phrase role="identifier">preserve_fpu_</phrase><phrase role="special">)</phrase> <phrase role="identifier">BOOST_NOEXCEPT</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">size</phrase><phrase role="special">(</phrase> <phrase role="identifier">ctx</phrase><phrase role="special">::</phrase><phrase role="identifier">default_stacksize</phrase><phrase role="special">()</phrase> <phrase role="special">),</phrase>
        <phrase role="identifier">do_unwind</phrase><phrase role="special">(</phrase> <phrase role="identifier">do_unwind_</phrase><phrase role="special">),</phrase>
        <phrase role="identifier">preserve_fpu</phrase><phrase role="special">(</phrase> <phrase role="identifier">preserve_fpu_</phrase><phrase role="special">)</phrase>
    <phrase role="special">{}</phrase>
<phrase role="special">};</phrase>
</programlisting>
    <anchor id="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special______phrase___code_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special______phrase___code_"><code><phrase
      role="identifier">attributes</phrase><phrase role="special">()</phrase></code></link>
    </bridgehead>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>Effects:</term>
        <listitem>
          <para>
            Default constructor using <code><phrase role="identifier">ctx</phrase><phrase
            role="special">::</phrase><phrase role="identifier">default_stacksize</phrase><phrase
            role="special">()</phrase></code>, does unwind the stack after coroutine/generator
            is complete and preserves FPU registers.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Throws:</term>
        <listitem>
          <para>
            Nothing.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <anchor id="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase____code_size_code__phrase_role__special_____phrase___code_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase____code_size_code__phrase_role__special_____phrase___code_"><code><phrase
      role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase
      role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase>
      </code>size<code><phrase role="special">)</phrase></code></link>
    </bridgehead>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>Effects:</term>
        <listitem>
          <para>
            Argument <code><phrase role="identifier">size</phrase></code> defines
            stack size of the inner <code><phrase role="identifier">context</phrase></code>.
            Stack unwinding after termination and preserving FPU registers is set
            by default.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Throws:</term>
        <listitem>
          <para>
            Nothing.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <anchor id="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__flag_unwind_t__phrase___phrase_role__identifier__do_unwind__phrase__phrase_role__special_____phrase___code_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__flag_unwind_t__phrase___phrase_role__identifier__do_unwind__phrase__phrase_role__special_____phrase___code_"><code><phrase
      role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase
      role="identifier">flag_unwind_t</phrase> <phrase role="identifier">do_unwind</phrase><phrase
      role="special">)</phrase></code></link>
    </bridgehead>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>Effects:</term>
        <listitem>
          <para>
            Argument <code><phrase role="identifier">do_unwind</phrase></code> determines
            if stack will be unwound after termination or not. The default stacksize
            is used for the inner <code><phrase role="identifier">context</phrase></code>
            and FPU registers are preserved.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Throws:</term>
        <listitem>
          <para>
            Nothing.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <anchor id="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__keyword__bool__phrase___phrase_role__identifier__preserve_fpu__phrase__phrase_role__special_____phrase___code_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__keyword__bool__phrase___phrase_role__identifier__preserve_fpu__phrase__phrase_role__special_____phrase___code_"><code><phrase
      role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase
      role="keyword">bool</phrase> <phrase role="identifier">preserve_fpu</phrase><phrase
      role="special">)</phrase></code></link>
    </bridgehead>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>Effects:</term>
        <listitem>
          <para>
            Argument <code><phrase role="identifier">preserve_fpu</phrase></code>
            determines if FPU register have to be preserved if a <code><phrase role="identifier">context</phrase></code>
            switches. THe default stacksize is used for the inner <code><phrase role="identifier">context</phrase></code>
            and the stack will be unwound after termination.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Throws:</term>
        <listitem>
          <para>
            Nothing.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <anchor id="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase___phrase_role__identifier__size__phrase__phrase_role__special_____phrase___phrase_role__identifier__flag_unwind_t__phrase___phrase_role__identifier__do_unwind__phrase__phrase_role__special_____phrase___code_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase___phrase_role__identifier__size__phrase__phrase_role__special_____phrase___phrase_role__identifier__flag_unwind_t__phrase___phrase_role__identifier__do_unwind__phrase__phrase_role__special_____phrase___code_"><code><phrase
      role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase
      role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase>
      <phrase role="identifier">size</phrase><phrase role="special">,</phrase> <phrase
      role="identifier">flag_unwind_t</phrase> <phrase role="identifier">do_unwind</phrase><phrase
      role="special">)</phrase></code></link>
    </bridgehead>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>Effects:</term>
        <listitem>
          <para>
            Arguments <code><phrase role="identifier">size</phrase></code> and <code><phrase
            role="identifier">do_unwind</phrase></code> are given by the user. FPU
            registers preserved during each <code><phrase role="identifier">context</phrase></code>
            switch.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Throws:</term>
        <listitem>
          <para>
            Nothing.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <anchor id="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase___phrase_role__identifier__size__phrase__phrase_role__special_____phrase___phrase_role__keyword__bool__phrase___phrase_role__identifier__preserve_fpu__phrase__phrase_role__special_____phrase___code_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase___phrase_role__identifier__size__phrase__phrase_role__special_____phrase___phrase_role__keyword__bool__phrase___phrase_role__identifier__preserve_fpu__phrase__phrase_role__special_____phrase___code_"><code><phrase
      role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase
      role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase>
      <phrase role="identifier">size</phrase><phrase role="special">,</phrase> <phrase
      role="keyword">bool</phrase> <phrase role="identifier">preserve_fpu</phrase><phrase
      role="special">)</phrase></code></link>
    </bridgehead>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>Effects:</term>
        <listitem>
          <para>
            Arguments <code><phrase role="identifier">size</phrase></code> and <code><phrase
            role="identifier">preserve_fpu</phrase></code> are given by the user.
            The stack is automatically unwound after coroutine/generator terminates.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Throws:</term>
        <listitem>
          <para>
            Nothing.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <anchor id="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__flag_unwind_t__phrase___phrase_role__identifier__do_unwind__phrase__phrase_role__special_____phrase___phrase_role__keyword__bool__phrase___phrase_role__identifier__preserve_fpu__phrase__phrase_role__special_____phrase___code_"/>
    <bridgehead renderas="sect3">
      <link linkend="coroutine.attributes._code__phrase_role__identifier__attributes__phrase__phrase_role__special_____phrase___phrase_role__identifier__flag_unwind_t__phrase___phrase_role__identifier__do_unwind__phrase__phrase_role__special_____phrase___phrase_role__keyword__bool__phrase___phrase_role__identifier__preserve_fpu__phrase__phrase_role__special_____phrase___code_"><code><phrase
      role="identifier">attributes</phrase><phrase role="special">(</phrase> <phrase
      role="identifier">flag_unwind_t</phrase> <phrase role="identifier">do_unwind</phrase><phrase
      role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">preserve_fpu</phrase><phrase
      role="special">)</phrase></code></link>
    </bridgehead>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>Effects:</term>
        <listitem>
          <para>
            Arguments <code><phrase role="identifier">do_unwind</phrase></code> and
            <code><phrase role="identifier">preserve_fpu</phrase></code> are given
            by the user. The stack gets a default value of <code><phrase role="identifier">ctx</phrase><phrase
            role="special">::</phrase><phrase role="identifier">default_stacksize</phrase><phrase
            role="special">()</phrase></code>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Throws:</term>
        <listitem>
          <para>
            Nothing.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section id="coroutine.performance">
    <title><link linkend="coroutine.performance">Performance</link></title>
    <para>
      Performance of <emphasis role="bold">Boost.Coroutine</emphasis> was measured
      on the platforms shown in the following table. Performance measurements were
      taken using <code><phrase role="identifier">rdtsc</phrase></code> and <code><phrase
      role="special">::</phrase><phrase role="identifier">clock_gettime</phrase><phrase
      role="special">()</phrase></code>, with overhead corrections, on x86 platforms.
      In each case, stack protection was active, cache warm-up was accounted for,
      and the one running thread was pinned to a single CPU. The code was compiled
      using the build options, 'variant = release cxxflags = -DBOOST_DISABLE_ASSERTS'.
    </para>
    <para>
      The numbers in the table are the number of cycles per iteration, based upon
      an average computed over 10 iterations.
    </para>
    <table frame="all">
      <title>Perfomance of coroutine switch</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>
              <para>
                Platform
              </para>
            </entry>
            <entry>
              <para>
                CPU cycles
              </para>
            </entry>
            <entry>
              <para>
                nanoseconds
              </para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                AMD Athlon 64 DualCore 4400+ (32bit Linux)
              </para>
            </entry>
            <entry>
              <para>
                58
              </para>
            </entry>
            <entry>
              <para>
                65
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                Intel Core2 Q6700 (64bit Linux)
              </para>
            </entry>
            <entry>
              <para>
                85
              </para>
            </entry>
            <entry>
              <para>
                28
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section id="coroutine.acknowledgements">
    <title><link linkend="coroutine.acknowledgements">Acknowledgments</link></title>
    <para>
      I'd like to thank Eugene Yakubovich, Giovanni Piero Deretta, Hartmut Kaiser,
      Vicente J. Botet Escriba, Yuriy Krasnoschek.
    </para>
  </section>
</article>
